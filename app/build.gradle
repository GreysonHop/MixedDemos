apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions' // Kotlin语言中直接用组件的 ID 去访问组件，现在官方推荐使用 ViewBinding
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

android {
    compileSdkVersion 30
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.testdemo"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 2
        versionName "1.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        renderscriptTargetApi 18 //高斯模糊渲染时需要的
        renderscriptSupportModeEnabled true

        // Android 5.0（API 级别 21）及更高版本使用名为 ART 的运行时，它本身支持从 APK 文件加载多个 DEX 文件。
        // ART 在应用安装时执行预编译，这会扫描查找 classesN.dex 文件，并将它们编译成单个 .oat 文件，
        // 以供 Android 设备执行。因此，如果您的 minSdkVersion 为 21 或更高版本，系统会默认启用 MultiDex，
        // 并且您不需要 MultiDex 库。
        // multiDexEnabled true

        resValue "string", "google_search_api_key", (project.findProperty("GOOGLE_SEARCH_API_KEY") ?: "")
        resValue "string", "google_map_api_key", (project.findProperty("GOOGLE_MAP_API_KEY") ?: "")

        manifestPlaceholders = [UMENG_CHANNEL_VALUE: 'Default'] // 默认渠道为Default
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    signingConfigs {
        release {
            keyAlias 'testdemo'
            keyPassword 'testdemokey'
            storeFile file('../testKeyStore.jks')
            storePassword 'testdemopwd'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            zipAlignEnabled true

            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            // signingConfig signingConfigs.release
            debuggable true
            minifyEnabled false

            // 如果您使用的是 Android 插件 3.0.0 或更高版本，默认情况下仅针对“调试” build 类型停用 PNG 处理。
            // 如需针对其他 build 类型停用此优化，请将以下代码添加到 build.gradle 文件中：
            // Disables PNG crunching for the release build type.
            crunchPngs false
        }

        /**
         * The `initWith` property allows you to copy configurations from other build types,
         * then configure only the settings you want to change. This one copies the debug build
         * type, and then changes the manifest placeholder and application ID.
         */
        staging {
            initWith debug
            manifestPlaceholders = [hostName: "internal.example.com"]
            applicationIdSuffix ".debugStaging"
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                if (variant.buildType.name == "debug") {
                    outputFileName = outputFile.name.replace(
                            ".apk",
                            "-v${defaultConfig.versionName}" + ".apk")
                } else if (variant.buildType.name == "release") {
                    outputFileName = "MixedDemos_V${variant.versionName}" +
                            "_${new Date().format("yyyyMMdd")}_release.apk"
                }
            }
        }
    }

    // 测试多渠道打包（网上很多人将产品变种运用于渠道打包）。
    // 参考官网：https://developer.android.google.cn/studio/build/build-variants。
    // 请注意，具有不同应用 ID 的 APK 在 Google Play 商店中会被视为不同的应用。所以如果您想要改用相同的应用详情分发
    // 多个 APK，每个 APK 以不同设备配置（如 API 级别）为目标，那么您必须对每个构建变体使用相同的应用 ID，但为每个 APK
    // 提供不同的 versionCode。如需了解详情，请参阅多 APK 支持。
    flavorDimensions "stage", "version"
    productFlavors {
        prod {
            dimension "version"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: 'prod'] //博客者应该是用了友盟的渠道统计SDK
        }

        dev {
            dimension "version"
            // The following configuration limits the "dev" flavor to using
            // English stringresources and xxhdpi screen-density resources.
            resConfigs "en", "xxhdpi"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: 'dev']

            // 会与build变体中的后缀连接到一起，比如".dev.debugStaging"。
            // 如果希望同一设备上同时具有调试版本和发布版本，这会很有用，因为两个 APK 不能具有相同的应用 ID。
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }

        huawei {
            dimension "stage"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: 'HuaWei']
        }

        xiaomi {
            dimension "stage"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: 'XiaoMi']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions { //kotlin调用Java的接口静态方法会报错
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    /**
     * 如果您希望在生成绑定类时忽略某个布局文件，请将 tools:viewBindingIgnore="true" 属性添加到相应布局文件的根视图中：
     * <LinearLayout
     *  ...
     *  tools:viewBindingIgnore="true" >
     *  ...
     * </LinearLayout>
     * 附：视图绑定不需要特别标记的XML布局文件，因此在应用中采用速度更快。在模块中启用视图绑定后，它会自动应用于该模块的所有布局
     */
    /*viewBinding { //启用视图绑定功能。看官方的一些Demo发现dataBinding为true时，viewBinding可以不用设置？但自己测试却还是需要
        enabled = true // 另见buildFeatures
    }*/

    /*packagingOptions {//so库冲突时，用下面代码表示只采用第一次读取到的那个
        pickFirst "lib/mips/*.so"
    }*/
}

repositories {
    mavenCentral()
    mavenLocal() //Add local m2 repository of yours
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    androidTestImplementation project(path: ':app')
    def lifecycle_version = "2.2.0"

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(path: ':ncalendar')
    implementation files('libs/brokenview.jar')

    testImplementation project(path: ':app') // 添加这句单元测试类的目录才能访问到app主目录下的类
    // 谷歌官方单元测试相关：
    testImplementation 'junit:junit:4.13.2'
    // Optional -- Robolectric environment
    androidTestImplementation 'androidx.test:core:1.4.0'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'androidx.test:runner:1.4.0'// AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test.ext:junit:1.1.3' // Assertions
    androidTestImplementation 'com.google.truth:truth:1.1.3' // Assertions
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0' // UI测试所需
    androidTestImplementation 'androidx.test:rules:1.4.0' // 好像跟runner库的作用是相似的。

    /*    安卓官方架构相关包    */
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.1.0'
    // implementation 'androidx.multidex:multidex:2.0.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version" //让模块支持Kotlin编程
    // implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7' //引入协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'//与上面的是什么关系？

    implementation 'androidx.core:core-ktx:1.3.2' //暂时不知道什么时候该用

    // ViewModel开发所需要：
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version" // ViewModel
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version" // LiveData
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // Annotation processor
    // kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    implementation "androidx.fragment:fragment-ktx:1.2.5" //辅助工具库，
    implementation "androidx.activity:activity-ktx:1.1.0"


    /*    一些UI组件    */
    api 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.50' //BaseQuickAdapter
    implementation 'com.jcodecraeer:xrecyclerview:1.5.9' //下拉刷新、上拉加载组件
    implementation 'com.lcodecorex:tkrefreshlayout:1.0.7' //各种下拉刷新、Behavior实现的列表外上头组件等效果
    implementation 'com.github.LuckSiege.PictureSelector:picture_library:v2.0.0' //仿微信的高级图片选择组件
    implementation 'com.github.yyued:SVGAPlayer-Android:2.1.8' //动态礼物效果播放组件
    implementation 'com.akexorcist:round-corner-progress-bar:2.1.0'//进度条圆角，好像因为什么问题而没采用
    implementation 'com.facebook.rebound:rebound:0.3.8' //引用谷歌的一些动画加速器
    implementation 'com.wonderkiln:blurkit:1.0.0'
    implementation 'com.github.GreysonHop:WeChatTag:v2.0.0' //测试自己项目的Gradle导入


    /*    工具类包（网络访问、加载图片等）    */
    api 'io.reactivex.rxjava2:rxjava:2.2.5'
    implementation 'com.squareup.okhttp3:okhttp:4.8.1'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    // Glide集成OkHttp时需要使用的库，参考官方文档：http://bumptech.github.io/glide/doc/configuration.html#applications
    implementation "com.github.bumptech.glide:okhttp3-integration:4.11.0"
    // Glide需要处理注解时的依赖库，用于处理注解并生成java类
    implementation 'com.github.bumptech.glide:annotations:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    implementation("org.jetbrains.kotlin:kotlin-reflect:1.4.20") // kotlin反射必须导入的


    /*    第三方框架整体功能的导包    */
    implementation 'com.google.android.libraries.places:places:2.1.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'//谷歌地图必需包
    // 地图操作工具类，添加标记等
    // implementation 'com.google.maps.android:android-maps-utils:0.5+'

    // 引入别人的WebRTC项目所需的三个包
    implementation 'org.webrtc:google-webrtc:1.0.30039'
    implementation 'org.java-websocket:Java-WebSocket:1.3.9'
    implementation 'com.alibaba:fastjson:1.1.64.android'

    // 内存泄漏检查工具的三个包，分Debug与否
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'

    stagingImplementation('com.squareup.leakcanary:leakcanary-android:1.6.3')
    stagingImplementation('com.squareup.leakcanary:leakcanary-support-fragment:1.6.3')
}
